 Gayle Laakmann McDowellObviously I applied topological sort to a graph of the dependencies across sections and chapters.First, there was the decision about which chapters and sections to include. Second, I had to draw a directed graph and connected nodes where one should be discussed before the other, either due to a dependency in the material or a difference in complexity. Third, I applied a simple topological sort to determine a linear ordering. There's some randomness to it too.Sections"Introductory Material" obviously needs to be before anything else."Solutions" obviously needs to be after the questions themselves. "Data Structures" needs to be before "Algorithms", since they're less complex and the algorithm questions often depend on knowledge of data structures."Assorted Review Problems" needs to be after all the other questions.So you get this graph for the sections:Applying a topological sort to this, you get the order in the book.ChaptersWithin Data Structures, "Arrays" needs to be before anything else, as it's the most fundamental. It makes sense to me to discuss linked lists before stacks and queues or trees, since linked lists are more basic than either of those.Within "Algorithms", there isn't a lot of dependency. "Recursion and Dynamic Programming" should be before "Sorting", since sorting uses recursion.Within "Knowledge Based", C++ and Java should be discussed adjacent to each other and before Databases.Within "Assorted Review Problems", moderate problems should obviously be discussed before hard problems.So then I just applied a straightforward topological sort to get a linear ordering.I presume this is the standard algorithm for all authors to decide chapter ordering... right?Okay, fine, I didn't really draw this out. But something like this was roughly in my head. Certain topics were dependent on others, and certain topics were just less complex and should be discussed earlier. A lot of chapters, especially within algorithms, could be discussed in any order.