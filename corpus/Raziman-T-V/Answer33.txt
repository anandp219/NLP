 Here is a simple implementation, similar to what I usually use in contests. 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
//Adjacency list to store graphvector<int> adjlist[NMAX];//Arrayschar visited[NMAX];int distance[NMAX];//Read Graph//First read number of vertices (N) and edges (M)//Then read the (undirected) edges//Note that vertices are zero-indexedint N,M;scanf("%d%d",&N,&M);for(int i=0;i<M;i++){ int a,b; scanf("%d%d",&a,&b); adjlist[a].push_back(b); adjlist[b].push_back(a);}//Now do the BFS from vertex 0 to find distances to all vertices//Start by initialising all visited values as 0 and distances as -1memset(visited,0,sizeof visited);memset(distance,-1,sizeof distance);//Create the BFS queue and put the start vertex indistance[0]=0;visited[0]=1;queue<int> bfsq;bfsq.push(0);//BFSwhile(!bfsq.empty()){ int u=bfsq.front(); bfsq.pop; //Now look at all neighbours of u for(int i=0;i<adjlist[u].size();i++) { int v=adjlist[u][i]; //If v has not been processed yet, do that now if(!visited[v]) { visited[v]=1; distance[v]=distance[u]+1; bfsq.push(v); } }}//We are done. We have the reachability and distances to all vertices