 One method to find the lowest common ancestor (LCA) of two nodes on a rooted tree is by storing the [math]2^k[/math]th parent of each vertex.Suppose that for each node on the tree, we knew two quantities:The depth of the node (that is, the distance of the node from the root)The [math]2^k[/math]th parent of the node for all [math]k[/math] upto [math]\log N[/math]The depth and the [math]2^0[/math]th parent can be easily calculated using a dfs: 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
char seen[NMAX];int depth[NMAX];int parent[LGNMAX][NMAX];vector<int> adjlist[NMAX];memset(seen, 0, sizeof seen);memset(parent, -1, sizeof parent);void dfs(int u) { seen[u] = 1; for (int i = 0; i < adjlist[u].size(); ++i) { int v = adjlist[u][i]; if (seen[v]) continue; depth[v] = depth[u] + 1; parent[0][v] = u; dfs(v); }}Once the [math]2^0[/math]th parent is found, the rest of the parent array can be filled in easily.1
2
3
4
5
6
7
for (int i = 1; i < LGNMAX; ++i) { for (int j = 0; j < N; ++j) { if (parent[i - 1][j] != -1) { parent[i][j] = parent[i - 1][parent[i - 1][j]]; } }}I will explain how to find the LCA using these quantities in [math]O(\log N)[/math] per query. As an example, consider the following graph where we want to find the LCA of the vertices [math]u=8[/math] and [math]v=9[/math].The first thing to note is that the depth of the LCA is going to be less than or equal to the depth of both vertices. Thus if the depths of the two vertices are not equal, we can make them equal by going up the ancestry tree of the further vertex as much as necessary. We can use the parent[][] array to do this in [math]O(\log N)[/math] time, essentially by looking at the binary representation of the height we have to jump:1
2
3
4
5
6
7
int getparent(int u, int k) { for (int i = 0; i < LGNMAX; ++i) { if (k & 1) u = parent[i][u]; k >>= 1; } return u;}In this case, we go up to 7 from 9.At this stage, if the two vertices under consideration are the same, we are done (would have been the case if we started with 7 and 9, for example). If not, we need to find the smallest number [math]x[/math] such that the [math]x[/math]th parent of [math]u[/math] is the same as the [math]x[/math]th parent of [math]v[/math].To do this, we can use the parent[][] array again. Find the largest value of [math]k[/math] such that the [math]2^k[/math]th parent of [math]u[/math] and [math]v[/math] are different, and update [math]u[/math] and [math]v[/math] to be those parents. Continue till [math]k=0[/math], and it is easy to see that the vertices we end up with will be just below the LCA.Again, we are essentially building the distance from the vertices to the LCA bit-by bit. Here is the full LCA function including the height-adjustment: 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
int LCA(int u, int v) { // Adjust the heights if (depth[u] > depth[v]) { u = getparent(u, depth[u] - depth[v]); } else if (depth[v] > depth[u]) { v = getparent(v, depth[v] - depth[u]); } // If the vertices are now same, we are done if (u == v) return u; // Go as far up as you can such that vertices are different for (int i = LGNMAX - 1; i >= 0; i--) { if (parent[i][u] != parent[i][v]) { u = parent[i][u]; v = parent[i][v]; } } // Parent of u (or v) is now LCA return parent[0][u];}The depth-first search takes [math]O(N)[/math] time, and the following parent array computation takes [math]O(N \log N)[/math]. Both the getparent() and LCA() functions need to be run at most once per query and take [math]O(\log N)[/math] each. Thus the overall time complexity of the solution is [math]O((N+Q) \log N)[/math] and the space complexity is [math]O(N \log N)[/math]. There are algorithms which can find LCA in linear space and time with a different preprocessing, but they are conceptually harder and this one should be enough for most competitive programming applications. In any case, here is a link with an explanation of the [math]O(N)[/math] solution : Range Minimum Query and Lowest Common Ancestor