 Let's look at this from several aspects: correctness, readability, and style.CorrectnessIt's not actually technically correct. It's close and would only require minor tweaks to fix.First, you've implemented this extra little bit that isn't in the problem. If there's only one character of a particular type, you just insert that character (instead of the character + the frequency). That's actually not the assignment.Second, the problem requires that if the compressed string would be longer than the original string, you should return the original string. You haven't done this. This is the primary reason why the book's code is "longer": it's actually solving a different problem. If you strip this part out of the book's code, it's actually shorter and simpler than your code.If you make this change, there are two ways of doing it. You could check in advance (and save yourself the memory usage) or you can check after you've done the compression. You can debate which approach is better, and it depends on what assumptions you have. The book checks in advance, on the reasoning that if you really need to compress a string, then you potentially throwing long strings at it. It's nice to save yourself the memory usage.(Additionally, if your interviewer adds this constraint to the problem, then they may be looking for something beyond just throwing in an if-statement at the end.)ReadabilityYou've used nested loops where the inner loop modifies the outer loop. Yuck. It makes it look like you have an O(N^2) algorithm, even when you don't, and makes the flow of the program confusing.If you are going to do this, I'd actually rather you use not use "i" as the iterating variable on the loops. People usually use "i" when it's something very straightforward, like just looping through this. It has an implication of "ignore this variable -- it's not terribly important." Something like "index" would probably be better here.Avoid that when possible -- and it's definitely possible here. You can do this with just one linear loop forward. That's how the code in the book works.Style & other minor issuesFix your spacing. There should be a space after "for", "while", and "if".Be consistent. You can debate whether or not you should have spaces around comparisons (equals, less than, etc), although virtually every style guideline I'm aware of requires them. But if you really argue that you don't want them, then you should be consistent here. You have spaces sometimes, but not always ("i<input.length();").You declare the StringBuffer in the beginning, but then you have a (potential) return right after it. Why not just put the StringBuffer declaration after it?There's no reason to have the bulk of your code wrapped within an else statement. It's okay to do one-line if statements (actually, I don't love them, but I use them in the book for compactness), but don't mix a one-line if statement with a multiline else block.The first if-statement is actually