 It depends on the bean and how it's used.If your bean is very likely to be required the instant the server comes online, then initializing it during startup is probably the best bet since the server would be unable to do much work without it.If your bean is very lightweight, e.g., its initialization consists only of letting Spring do dependency injection, then there's little harm initializing it at startup; doing so will make the system's behavior somewhat easier to reason about and easier to debug, and will minimize overhead.However, if you have a bean that's expensive to initialize and that is only used occasionally, especially if it's only used in a non-interactive context like processing batch jobs, lazy initialization may be the right call. In that case the server can begin doing other work right away, and you won't pay the cost of initializing the bean in question until it's actually needed.Lazy initialization comes with overhead such as the use of proxy objects that wouldn't otherwise be needed, so it shouldn't be used ubiquitously if you care at all about efficiency. But the cost will be spread out over time instead of all occurring before the server can do any work. Depending on your application, that may be the correct tradeoff to make.These principles are broadly applicable to lazy initialization as a general concept, not Spring in particular, though obviously the low-level details will differ.