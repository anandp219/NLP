 Well, there are tricky things about it for people who come to it other languages that are very different from Javascript. Javascript is object-oriented, but it uses a different kind of object-orientation than most other popular languages, such as C++, Java, and PHP. If you're used to the more-common form, you'll be confused by the JavaScript way. I actually think JavaScript's approach is simpler (or at least no more difficult) for someone who learns it as his first programming language (or as his first object-oriented programming language), but for JavaScript-as-second-language folks, it can be a brainfuck. The same is true for it's functional aspects. The first language I learned* was LISP, which is a functional language, so the idea of first-class functions, pure functions, and immutability weren't odd or difficult for me when I encountered them in JavaScript. But to someone who has never done functional programming before, there will be a learning curve, especially if he's spent a lot of time coding in non-functional languages. It's relatively easy to learn metric if it's your first measurement system. It's much harder if you've grown up with inches, feet, and pounds. The only truly difficult thing about Javascript, in my opinion, is its relative lack of community standards and standard libraries. There are often ten ways of doing the same thing, and if you ask ten JavaScript developers to tell you the best way, you'll get ten different answers**. This is true for many languages, but there tends to be more agreement--in, say, the Java and Python communities--about best tools and practices. This is all relative. Two Python programmers may well have profound disagreements, but it tends to happen much more often in the Javascript community. This is because JavaScript hasn't been taken seriously for much as-long-as most other popular languages. It's been around for years, but only a few as a language that interested professionals. So the situation is a little like English in Shakespeare's day, before spelling and grammar rules had been standardized. (Shakespeare spelled his own name in several ways!)Practiced JavaScript developers tend to love this flexibility. Ask me how to create instances of objects, and I can show you a whole bunch of different ways. And I love the variety, because I can pick whatever method I think best suits a task, but that's a bit overwhelming for newbies. When I was starting out, I often wanted to scream, "Just tell me the right way to do it!"There's another tricky thing "about" JavaScript. I put scare quotes around "about," because this isn't really a tricky thing about the language itself. The problem is the ecosystem it exists in. The same is true for most languages. Want to learn Python? I mean really learn it, so you can get a job as a Python developer? If so, learning the language itself will be the easy part. Or at least the short part. It will take you much longer to learn Python best practices, Python IDEs, key Python libraries, etc.Most people want to learn JavaScript for web development. If they're new to web programming, they get discouraged--and I don't blame them--when they realize the language itself wont get them very far. To be productive, they also need to learn common libraries and frameworks like JQuery, Underscore, Angular, Backbone, Ember, and React. (A professional JavaScript developer should have at least some familiarity with all of them!)They also needs to understand tooling, e.g. build systems, such as Grunt, Gulp, and Webpack. They need to learn their way around an editor, such as Atom, Webstorm, or Sublime Text. They need to have some experience with the command line. They needs to know how to write and run unit tests. They needs to know how to use a version-control system (most-likely GIT). They needs to know HTML, CSS, and a CSS pre-processing language, such as LESS. They need to know server-side JavaScript at least well-enough to handle node and npm. And they need to be able to intelligently collaborate with server-side programmers, which means having some level of understanding of web protocols, databases, and so on. Finally, this is a confusing time to learn JavaScript, because many developers have started using ES6 (a.k.a ES2015), the latest version of the language, which is syntactically very different from past versions. Example: Here's an old-style Javascript function:1
2
3
var foo = function(num) { return num + 1;} Here's one way to write it in ES6:1
let foo = num => num + 1; Because we're in a transitional period, JavaScript books, courses, articles, and tutorials may use either format or a mixture of the two--as may source code a newbie has to read. So, unfortunately, this means you need to learn both syntaxes when you're first starting. Which is a bit like trying to learn Spanish and Portuguese at the same time. In a couple of years, everyone will be writing JavaScript the newer way, but we're not there yet. * After a brief acquaintanceship with BASIC. ** It's too early to say this with absolute confidence, but I've seen more convergence of opinion in the JavaScript than ever before. It's centered around the React framework. There are definitely programmers who dislike it or prefer other solutions, but React is becoming very popular and influencing lots of other tools.