  One method to find the lowest common ancestor (LCA) of two nodes on a rooted tree is by storing the [math]2^k[/math]th parent of each vertex.Suppose that for each node on the tree  we knew two quantities:The depth of the node (that is  the distance of the node from the root)The [math]2^k[/math]th parent of the node for all [math]k[/math] upto [math]\log N[/math]The depth and the [math]2^0[/math]th parent can be easily calculated using a dfs: 1 2 3 4 5 6 7 8 9101112131415161718char seen[NMAX];int depth[NMAX];int parent[LGNMAX][NMAX];vector<int> adjlist[NMAX];memset(seen  0  sizeof seen);memset(parent  -1  sizeof parent);void dfs(int u) { seen[u] = 1; for (int i = 0; i < adjlist[u].size(); ++i) { int v = adjlist[u][i]; if (seen[v]) continue; depth[v] = depth[u] + 1; parent[0][v] = u; dfs(v); }}Once the [math]2^0[/math]th parent is found  the rest of the parent array can be filled in easily.1234567for (int i = 1; i < LGNMAX; ++i) { for (int j = 0; j < N; ++j) { if (parent[i - 1][j] != -1) { parent[i][j] = parent[i - 1][parent[i - 1][j]]; } }}I will explain how to find the LCA using these quantities in [math]O(\log N)[/math] per query.