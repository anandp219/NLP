Here is the full LCA function including the height-adjustment: 1 2 3 4 5 6 7 8 910111213141516171819202122int LCA(int u  int v) { // Adjust the heights if (depth[u] > depth[v]) { u = getparent(u  depth[u] - depth[v]); } else if (depth[v] > depth[u]) { v = getparent(v  depth[v] - depth[u]); } // If the vertices are now same  we are done if (u == v) return u; // Go as far up as you can such that vertices are different for (int i = LGNMAX - 1; i >= 0; i--) { if (parent[i][u] != parent[i][v]) { u = parent[i][u]; v = parent[i][v]; } } // Parent of u (or v) is now LCA return parent[0][u];}The depth-first search takes [math]O(N)[/math] time  and the following parent array computation takes [math]O(N \log N)[/math].