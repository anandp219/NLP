  Viktor Toth's answer covers a bunch of general principles. Another one is to look at performance from the top down.What I mean by that: say you have some code that searches a large data set and it's too slow. You can do a bunch of profiling (and that's almost always the right place to start) and discover that a particular inner loop is where you're spending most of your time. You might focus your efforts on making that small chunk of code run as fast as it possibly can. In a lot of cases this kind of targeted optimization can get you some impressive speedups  and when people talk about optimization this is usually the kind of thing they mean.But it should be the last step of your optimization process  not the first.