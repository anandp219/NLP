The skill you need to cultivate to become a good developer and to be attractive to the kinds of companies in the question isn't plugging together objects from a library of canned formulas  but rather understanding the reasoning behind them deeply enough that  when faced with the same problem  you will arrive at the same solution on your own. And much more importantly  when faced with a similar but not identical problem  you will do something else rather than try to shoehorn the solution into an existing design pattern that's an awkward fit.It's on that last point where the schools I criticize at the start of this answer really fail  and the result is gigabytes of horrific code (usually enterprise software) that's a teetering Jenga tower of generic implementations of popular design patterns stacked one on top of the other  resulting in software so complex and designs so obfuscated with unnecessary indirection that no developer can hold the entire logic in their head at once.